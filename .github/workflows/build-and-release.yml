name: Build and Release Flutter Packages

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [linux, windows, macos, android, ios]
        arch: [x64, arm64]
        exclude:
          - platform: linux
            arch: arm64
          - platform: windows
            arch: arm64
          - platform: ios
            arch: x64
          - platform: android
            arch: x64
        include:
          - platform: macos
            arch: x64
          - platform: macos
            arch: arm64
          - platform: linux
            arch: x64
          - platform: android
            arch: arm64
          - platform: ios
            arch: arm64
          - platform: windows
            arch: x64

    runs-on: ${{ matrix.platform == 'windows' && 'windows-latest' ||
                 matrix.platform == 'linux'   && 'ubuntu-latest' ||
                 matrix.platform == 'android' && 'ubuntu-latest' ||
                 matrix.platform == 'macos'   && 'macos-latest' ||
                 matrix.platform == 'ios'     && 'macos-latest' }}

    env:
      PLATFORM: ${{ matrix.platform }}
      ARCH: ${{ matrix.arch }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Flutter for Unix-like Platforms
        if: ${{ matrix.platform != 'windows' }}
        shell: bash
        run: |
          echo "Setting up Flutter for $PLATFORM ($ARCH)"
          if [[ "$PLATFORM" == "linux" ]]; then
            sudo apt-get update
            sudo snap install flutter --classic
            export PATH="$PATH:/snap/bin"
          elif [[ "$PLATFORM" == "android" ]]; then
            sudo apt-get update
            sudo snap install flutter --classic
            sudo apt-get install -y openjdk-17-jdk
            JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))
            echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
            sudo update-alternatives --set java $JAVA_HOME/bin/java
            sudo update-alternatives --set javac $JAVA_HOME/bin/javac
            export PATH="$PATH:/snap/bin"
            java -version
          elif [[ "$PLATFORM" == "macos" || "$PLATFORM" == "ios" ]]; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            if [[ "$ARCH" == "arm64" ]]; then
              eval "$(/opt/homebrew/bin/brew shellenv)"
            else
              eval "$(/usr/local/bin/brew shellenv)"
            fi
            brew install --cask flutter
            export PATH="$PATH:$HOME/Library/Flutter/bin"
          fi
          flutter doctor

      - name: Set up Flutter for Windows
        if: ${{ matrix.platform == 'windows' }}
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.32.2'

      - name: Display Flutter version (Windows)
        if: ${{ matrix.platform == 'windows' }}
        shell: powershell
        run: flutter --version

      - name: Run Flutter tests
        if: ${{ matrix.platform == 'linux' && matrix.arch == 'x64' }}
        run: |
          flutter test --reporter expanded


      - name: Build Flutter App (Unix-like)
        if: ${{ matrix.platform != 'windows' }}
        shell: bash
        run: |
          case $PLATFORM in
            linux) flutter build linux --release ;;
            macos) flutter build macos --release ;;
            ios) flutter build ios --release --no-codesign ;;
            android)
              export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
              export PATH=$JAVA_HOME/bin:$PATH
              flutter build apk --release ;;
          esac

      - name: Build Flutter App (Windows)
        if: ${{ matrix.platform == 'windows' }}
        shell: powershell
        run: |
          flutter build windows --release

      - name: Create DMG package (macOS only)
        if: ${{ matrix.platform == 'macos' }}
        run: |
          brew install create-dmg
          DMG_NAME="XStream-${ARCH}.dmg"
          echo "ðŸ’½ Creating macOS DMG: $DMG_NAME"
          create-dmg \
            --volname "XStream Installer" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --app-drop-link 600 185 \
            build/macos/$DMG_NAME \
            build/macos/Build/Products/Release/xstream.app

      - name: Zip iOS Runner.app
        if: ${{ matrix.platform == 'ios' }}
        run: |
          cd build/ios/iphoneos
          zip -r XStream.app.zip Runner.app

      - name: Show filtered build output
        shell: bash
        run: |
          echo "ðŸŽ¯ Distributable output for $PLATFORM-$ARCH:"
          if [[ "$PLATFORM" == "linux" ]]; then
            find build/linux -type f -executable -exec file {} \; | grep ELF | cut -d: -f1 | tee /tmp/${{ matrix.platform }}-${{ matrix.arch }}-release.log
          else
            find build -type f \( -iname "*.apk" -o -iname "*.dmg" -o -iname "*.exe" -o -iname "*.aab" -o -iname "*.app" \) | tee /tmp/${{ matrix.platform }}-${{ matrix.arch }}-release.log
          fi

      - name: Upload filtered artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            build/macos/*.dmg
            build/linux/x64/release/bundle/xstream
            build/windows/x64/runner/Release/xstream.exe
            build/app/outputs/flutter-apk/app-release.apk
            build/ios/iphoneos/XStream.app.zip

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: List all downloaded artifacts
        run: |
          echo "ðŸŽ¯ Listing contents of release-artifacts"
          find release-artifacts -type f | tee /tmp/artifacts.list
          echo "ðŸ“¦ Artifact summary:"
          cat /tmp/artifacts.list
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: daily-${{ github.run_number }}
          name: Daily Build ${{ github.run_number }}
          files: |
            release-artifacts/**/*.dmg
            release-artifacts/**/xstream.exe
            release-artifacts/**/app-release.apk
            release-artifacts/**/XStream.app.zip
            release-artifacts/build-linux-x64/linux/x64/release/bundle/xstream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
