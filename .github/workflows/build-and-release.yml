name: Build and Release Flutter Packages

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
    paths:
      - 'lib/**'
      - 'assets/**'
      - 'pubspec.*'
      - 'macos/**'
      - 'linux/**'
      - 'windows/**'
      - '.github/workflows/build-and-release.yml'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [linux, windows, macos, android, ios]
        arch: [x64, arm64]
        exclude:
          - platform: linux
            arch: arm64
          - platform: windows
            arch: arm64
          - platform: macos
            arch: x64
          - platform: ios
            arch: x64
          - platform: android
            arch: x64
        include:
          - platform: macos
            arch: arm64
          - platform: linux
            arch: x64
          - platform: windows
            arch: x64
          - platform: ios
            arch: arm64
          - platform: android
            arch: arm64

    runs-on: ${{ fromJson('{"windows":"windows-latest","linux":"ubuntu-22.04","android":"ubuntu-latest","macos":"macos-latest","ios":"macos-latest"}')[matrix.platform] }}

    env:
      PLATFORM: ${{ matrix.platform }}
      ARCH: ${{ matrix.arch }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      # 通用 flutter setup
      - name: Set up Flutter (Unix)
        if: ${{ matrix.platform != 'windows' }}
        shell: bash
        run: |
          if [[ "$PLATFORM" == "linux" || "$PLATFORM" == "android" ]]; then
            sudo apt-get update
            sudo apt-get install -y clang cmake ninja-build libgtk-3-dev pkg-config libx11-dev binutils libgl1-mesa-dev
            sudo apt-get install -y curl unzip clang cmake ninja-build libgtk-3-dev pkg-config libx11-dev binutils libgl1-mesa-dev
            mkdir -p $HOME/flutter
            curl -O https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_3.22.2-stable.tar.xz
            tar xf flutter_linux_3.22.2-stable.tar.xz -C $HOME/flutter --strip-components=1
            export PATH="$HOME/flutter/bin:$PATH"
            flutter --version
            flutter doctor
            echo "$HOME/flutter/bin" >> $GITHUB_PATH
          elif [[ "$PLATFORM" == "macos" || "$PLATFORM" == "ios" ]]; then
            brew install --cask flutter
            export PATH="$PATH:$HOME/Library/Flutter/bin"
          fi
          flutter --version
          flutter doctor

      - name: Set up Flutter (Windows)
        if: ${{ matrix.platform == 'windows' }}
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.32.2'

      # Go & MSYS2 setup (Windows)
      - name: Set up Go (Windows)
        if: ${{ matrix.platform == 'windows' }}
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Set up MSYS2 and GCC (Windows)
        if: ${{ matrix.platform == 'windows' }}
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: mingw-w64-x86_64-gcc
          path-type: inherit

      - name: Build Go shared library (Windows)
        if: ${{ matrix.platform == 'windows' }}
        shell: "msys2 {0}"
        run: ./build_scripts/build_windows.sh

      # Go for Linux
      - name: Set up Go (Linux only)
        if: ${{ matrix.platform == 'linux' }}
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Ensure ImageMagick is installed (Linux only)
        if: ${{ matrix.platform == 'linux' }}
        run: sudo apt-get install -y imagemagick

      - name: Build Go shared library (Linux)
        if: ${{ matrix.platform == 'linux' }}
        run: ./build_scripts/build_linux.sh

      # Flutter pub
      - name: Flutter pub get
        run: flutter pub get

      # Flutter test 只在 Linux 跑
      - name: Run Flutter tests (Linux only)
        if: ${{ matrix.platform == 'linux' }}
        run: flutter test --reporter expanded
        continue-on-error: true

      # Android build
      - name: Build Android App
        if: ${{ matrix.platform == 'android' }}
        shell: bash
        run: |
          flutter pub get
          dart run flutter_launcher_icons
          flutter build apk --release

      # iOS
      - name: Build iOS App
        if: ${{ matrix.platform == 'ios' }}
        shell: bash
        run: flutter build ios --release --no-codesign

      # macOS
      - name: Build macOS App
        if: ${{ matrix.platform == 'macos' }}
        shell: bash
        run: flutter build macos --release

      - name: Package macOS DMG
        if: ${{ matrix.platform == 'macos' }}
        run: make macos-${ARCH}

      # Linux build
      - name: Build Linux App
        if: ${{ matrix.platform == 'linux' }}
        shell: bash
        run: flutter build linux --release

      - name: Package and verify Linux bundle
        if: ${{ matrix.platform == 'linux' }}
        run: |
          bash build_scripts/package_linux_bundle.sh

      # Windows build
      - name: Build Windows App
        if: ${{ matrix.platform == 'windows' }}
        shell: powershell
        run: |
          flutter build windows --release

      - name: Package and verify Windows bundle
        if: ${{ matrix.platform == 'windows' }}
        shell: powershell
        run: |
          ./build_scripts/package_windows_bundle.ps1

      # iOS 压缩
      - name: Zip iOS Runner.app
        if: ${{ matrix.platform == 'ios' }}
        run: |
          cd build/ios/iphoneos
          zip -r XStream.app.zip Runner.app

      # 上传 artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            build/macos/*.dmg
            build/linux/x64/release/bundle/xstream-linux.zip
            build/linux/x64/release/AppImage/xstream-linux.AppImage
            build/windows/x64/runner/Release/xstream-windows.zip
            build/app/outputs/flutter-apk/app-release.apk
            build/ios/iphoneos/XStream.app.zip

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          if-no-artifact-found: ignore

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: daily-${{ github.run_number }}
          name: Daily Build ${{ github.run_number }}
          files: release-artifacts/**/*.*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: \ud83d\udce4 Deploy macOS DMG to update server
        env:
          RSYNC_SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$RSYNC_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$VPS_HOST" >> ~/.ssh/known_hosts
          rsync -av release-artifacts/**/build/macos/*.dmg root@"$VPS_HOST":/mnt/data/update-server/xstream-macos-latest/ --delete

      - name: \ud83d\udce4 Deploy Linux bundle to update server
        env:
          RSYNC_SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$RSYNC_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$VPS_HOST" >> ~/.ssh/known_hosts
          rsync -av release-artifacts/**/build/linux/x64/release/bundle/xstream-linux.zip root@"$VPS_HOST":/mnt/data/update-server/xstream-linux-latest/ --delete

      - name: \ud83d\udce4 Deploy Windows bundle to update server
        env:
          RSYNC_SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$RSYNC_SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$VPS_HOST" >> ~/.ssh/known_hosts
          rsync -av release-artifacts/**/build/windows/x64/runner/Release/xstream-windows.zip root@"$VPS_HOST":/mnt/data/update-server/xstream-windows-latest/ --delete

  publish-stores:
    runs-on: macos-latest
    needs: release
    strategy:
      matrix:
        store: [apple, google, microsoft]
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          if-no-artifact-found: ignore

      - name: Deploy to Apple App Store
        if: ${{ matrix.store == 'apple' }}
        uses: maierj/fastlane-action@v3.1.0
        with:
          lane: 'appstore'
          api_key: ${{ secrets.APP_STORE_API_KEY }}
          api_issuer_id: ${{ secrets.APP_STORE_ISSUER_ID }}
          ipa_path: release-artifacts/**/*.ipa

      - name: Deploy to Google Play
        if: ${{ matrix.store == 'google' }}
        uses: r0adkll/upload-google-play@v1.1.3
        with:
          serviceAccountJson: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: com.example.xstream
          releaseFiles: release-artifacts/**/*.apk

      - name: Deploy to Microsoft Store
        if: ${{ matrix.store == 'microsoft' }}
        uses: actions-marketplace-validations/trympet_microsoft-store-flight-action@main
        with:
          tenant-id: ${{ secrets.MS_STORE_TENANT_ID }}
          client-id: ${{ secrets.MS_STORE_CLIENT_ID }}
          client-secret: ${{ secrets.MS_STORE_CLIENT_SECRET }}
          app-id: ${{ secrets.MS_STORE_APP_ID }}
          flight-id: 'default'
          package-path: release-artifacts/**/*.msix

      - name: Output test link
        run: |
          if [ "${{ matrix.store }}" = "apple" ]; then
            echo "TestFlight: https://testflight.apple.com/join/example" >> "$GITHUB_STEP_SUMMARY"
          elif [ "${{ matrix.store }}" = "google" ]; then
            echo "Google Play Internal: https://play.google.com/apps/testing/com.example.xstream" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "Microsoft Store Test: https://www.microsoft.com/store/apps/9NBLGGH4R315" >> "$GITHUB_STEP_SUMMARY"
          fi
